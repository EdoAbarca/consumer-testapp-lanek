
services:
  # PostgreSQL Database Service
  postgres:
    image: postgres:15-alpine
    container_name: consumer-testapp-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-consumer_testapp}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d:ro
    networks:
      - consumer-testapp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-consumer_testapp}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Flask Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: consumer-testapp-backend
    restart: unless-stopped
    environment:
      - FLASK_ENV=${FLASK_ENV:-development}
      - FLASK_HOST=0.0.0.0
      - FLASK_PORT=5000
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-consumer_testapp}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
      - DEBUG=${DEBUG:-true}
    ports:
      - "${BACKEND_PORT:-5000}:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - consumer-testapp-network
    volumes:
      - ./backend:/app:delegated
      - backend_logs:/app/logs

  # Frontend Next.js Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: consumer-testapp-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:5000/api}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      - backend
    networks:
      - consumer-testapp-network
    volumes:
      - ./frontend:/app:delegated
      - /app/node_modules
      - /app/.next

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  backend_logs:
    driver: local

# Custom network for service communication
networks:
  consumer-testapp-network:
    driver: bridge